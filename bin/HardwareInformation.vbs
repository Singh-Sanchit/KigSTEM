CONST HKEY_LOCAL_MACHINE = &H80000002
CONST SEARCH_KEY = "DigitalProductID"
Const ForReading = 1
const ForAppending = 8
Dim inputfile, datevalue, NIC1, Nic, StrIP, arrSubKeys(4,1), foundKeys, iValues, arrDPID

Set NIC1 = GetObject("winmgmts:").InstancesOf("Win32_NetworkAdapterConfiguration")
For Each Nic in NIC1
if Nic.IPEnabled then
StrIP = Nic.IPAddress(i)
end if
next

dtsnow = Now()
dd = Right("00" & Day(dtsnow), 2)
mm = Right("00" & Month(dtsnow), 2)
yy = Year(dtsnow)
datevalue = dd & "-" & mm & "-" & yy
inputfile = "..\kigSTEM\" & StrIP &" "& datevalue & " " & "Hardware_Information" & "" & ".csv"
Set objFSO = CreateObject("Scripting.FileSystemObject")
Set reportfile = objFSO.OpenTextFile (inputfile, _
ForAppending, True)
Set objNetwork = CreateObject("Wscript.Network")
reportfile.writeline "" & "," & "Report Generated by :" &  ","  & objNetwork.UserName
reportfile.WriteLine "" & "," & "Report generated on :" &  ","  & Now

foundKeys = Array()
iValues = Array()
arrSubKeys(0,0) = "Windows PID Key:       "
arrSubKeys(0,1) = "SOFTWARE\Microsoft\Windows NT\CurrentVersion"
arrSubKeys(2,0) = "Office XP PID Key:     "
arrSubKeys(2,1) = "SOFTWARE\Microsoft\Office\10.0\Registration"
arrSubKeys(1,0) = "Office 2003 PID Key:   "
arrSubKeys(1,1) = "SOFTWARE\Microsoft\Office\11.0\Registration"
arrSubKeys(3,0) = "Office 2007 PID Key:   "
arrSubKeys(3,1) = "SOFTWARE\Microsoft\Office\12.0\Registration"
arrSubKeys(4,0) = "Office 2010 PID Key:   "
arrSubKeys(4,1) = "SOFTWARE\Microsoft\Office\14.0\Registration\{10140000-0011-0000-1000-0000000FF1CE}"
strComputer = "."
Arch = ""
Sku = ""
objReg=""
srvIP = startProcessing("localhost")

Function startProcessing(strComputer)
	 strComputer=strComputer
	 Set objWMIService = GetObject("winmgmts:\\" & strComputer & "\root\CIMV2")
	 Set objReg = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & strComputer & "\root\default:StdRegProv")
	 Set objSWbemDateTime = CreateObject("WbemScripting.SWbemDateTime")
	 Set colOSItems = objWMIService.ExecQuery( _
	 "SELECT * FROM Win32_OperatingSystem",,48)
	 Set colProcItems = objWMIService.ExecQuery( _
	 "SELECT * FROM Win32_Processor",,48)
	 Set colCompSysItems = objWMIService.ExecQuery( _
	 "SELECT * FROM Win32_ComputerSystem",,48) 
	 Set colTZItems = objWMIService.ExecQuery( _
	 "SELECT * FROM Win32_TimeZone",,48) 
	 Set colCompSysProdItems = objWMIService.ExecQuery( _
	 "SELECT * FROM Win32_ComputerSystemProduct",,48)
	 Set colBIOSItems = objWMIService.ExecQuery( _
	 "SELECT * FROM Win32_BIOS",,48)
	 Set colDiskItems = objWMIService.ExecQuery( _
	 "SELECT * FROM Win32_LogicalDisk",,48) 
	 Set colNetAdapConfigItems = objWMIService.ExecQuery( _
	 "SELECT * FROM Win32_NetworkAdapterConfiguration",,48) 
	 Set colVideoItems = objWMIService.ExecQuery( _
	 "SELECT * FROM Win32_VideoController",,48) 
	 Set colSoundItems = objWMIService.ExecQuery( _
	 "SELECT * FROM Win32_SoundDevice",,48) 
	 Set colOperatingSystems = objWMIService.ExecQuery _
	 ("Select * from Win32_OperatingSystem")
	 Set colCacheMemory = objWMIService.ExecQuery("Select * from Win32_CacheMemory",,48)
	 Set colPortInfo = objWMIService.ExecQuery("Select * from Win32_PortConnector",,48)
	 Set colUserInfo = objWMIService.ExecQuery("Select * from Win32_UserAccount",,48)
	 For Each objOSItem in colOSItems
		  If objOSItem.BuildNumber => 6000 Then
				Arch = objOSItem.OSArchitecture
				Select Case objOSItem.OperatingSystemSKU
				Case 0 Sku = "Unknown Windows version"
				Case 1 Sku = "Ultimate Edition"
				Case 2 Sku = "Home Basic Edition"
				Case 3 Sku = "Home Premium Edition"
				Case 4 Sku = "Enterprise Edition"
				Case 5 Sku = "Home Basic N Edition"
				Case 6 Sku = "Business Edition"
				Case 7 Sku = "Standard Server Edition"
				Case 8 Sku = "Datacenter Server Edition"
				Case 9 Sku = "Small Business Server Edition"
				Case 10 Sku = "Enterprise Server Edition"
				Case 11 Sku = "Starter Edition"
				Case 12 Sku = "Datacenter Server Core Edition"
				Case 13 Sku = "Standard Server Core Edition"
				Case 14 Sku = "Enterprise Server Core Edition"
				Case 15 Sku = "Enterprise Server Edition for Itanium-Based Systems"
				Case 16 Sku = "Business N Edition"
				Case 17 Sku = "Web Server Edition"
				Case 18 Sku = "Cluster Server Edition"
				Case 19 Sku = "Home Server Edition"
				Case 20 Sku = "Storage Express Server Edition"
				Case 21 Sku = "Storage Standard Server Edition"
				Case 22 Sku = "Storage Workgroup Server Edition"
				Case 23 Sku = "Storage Enterprise Server Edition"
				Case 24 Sku = "Server For Small Business Edition"
				Case 25 Sku = "Small Business Server Premium Edition"
				Case Else
					 Sku = "Could Not Determine Operating System SKU"
				End Select
		  End If
		  Select Case objOSItem.Locale
		  Case 0436 Locale = "Afrikaans (South Africa)"
		  Case 041c Locale = "Albanian (Albania)"
		  Case 0401 Locale = "Arabic (Saudi Arabia)"
		  Case 1401 Locale = "Arabic (Algeria)"
		  Case 3c01 Locale = "Arabic (Bahrain)"
		  Case 0c01 Locale = "Arabic (Egypt)"
		  Case 0801 Locale = "Arabic (Iraq)"
		  Case 2c01 Locale = "Arabic (Jordan)"
		  Case 3401 Locale = "Arabic (Kuwait)"
		  Case 3001 Locale = "Arabic (Lebanon)"
		  Case 1001 Locale = "Arabic (Libya)"
		  Case 1801 Locale = "Arabic (Morocco)"
		  Case 2001 Locale = "Arabic (Oman)"
		  Case 4001 Locale = "Arabic (Qatar)"
		  Case 2801 Locale = "Arabic (Syria)"
		  Case 1c01 Locale = "Arabic (Tunisia)"
		  Case 3801 Locale = "Arabic (U.A.E.)"
		  Case 2401 Locale = "Arabic (Yemen)"
		  Case 042b Locale = "Armenian (Armenia)"
		  Case 044d Locale = "Assamese"
		  Case 082c Locale = "Azeri (Cyrillic)"
		  Case 042c Locale = "Azeri (Latin)"
		  Case 042d Locale = "Basque"
		  Case 0423 Locale = "Belarusian"
		  Case 0445 Locale = "Bengali (India)"
		  Case 0845 Locale = "Bengali (Bangladesh)"
		  Case 141A Locale = "Bosnian (Bosnia/Herzegovina)"
		  Case 0402 Locale = "Bulgarian"
		  Case 0455 Locale = "Burmese"
		  Case 0403 Locale = "Catalan"
		  Case 045c Locale = "Cherokee (United States)"
		  Case 0804 Locale = "Chinese (PRC)"
		  Case 1004 Locale = "Chinese (Singapore)"
		  Case 0404 Locale = "Chinese (Taiwan)"
		  Case 0c04 Locale = "Chinese (Hong Kong SAR)"
		  Case 1404 Locale = "Chinese (Macao SAR)"
		  Case 041a Locale = "Croatian"
		  Case 101a Locale = "Croatian (Bosnia/Herzegovina)"
		  Case 0405 Locale = "Czech"
		  Case 0406 Locale = "Danish"
		  Case 0465 Locale = "Divehi"
		  Case 0413 Locale = "Dutch (Netherlands)"
		  Case 0813 Locale = "Dutch (Belgium)"
		  Case 0466 Locale = "Edo"
		  Case 0409 Locale = "English (United States)"
		  Case 0809 Locale = "English (United Kingdom)"
		  Case 0c09 Locale = "English (Australia)"
		  Case 2809 Locale = "English (Belize)"
		  Case 1009 Locale = "English (Canada)"
		  Case 2409 Locale = "English (Caribbean)"
		  Case 3c09 Locale = "English (Hong Kong SAR)"
		  Case 4009 Locale = "English (India)"
		  Case 3809 Locale = "English (Indonesia)"
		  Case 1809 Locale = "English (Ireland)"
		  Case 2009 Locale = "English (Jamaica)"
		  Case 4409 Locale = "English (Malaysia)"
		  Case 1409 Locale = "English (New Zealand)"
		  Case 3409 Locale = "English (Philippines)"
		  Case 4809 Locale = "English (Singapore)"
		  Case 1c09 Locale = "English (South Africa)"
		  Case 2c09 Locale = "English (Trinidad)"
		  Case 3009 Locale = "English (Zimbabwe)"
		  Case 0425 Locale = "Estonian"
		  Case 0438 Locale = "Faroese"
		  Case 0429 Locale = "Farsi"
		  Case 0464 Locale = "Filipino"
		  Case 040b Locale = "Finnish"
		  Case 040c Locale = "French (France)"
		  Case 080c Locale = "French (Belgium)"
		  Case 2c0c Locale = "French (Cameroon)"
		  Case 0c0c Locale = "French (Canada)"
		  Case 240c Locale = "French (DRC)"
		  Case 300c Locale = "French (Cote d'Ivoire)"
		  Case 3c0c Locale = "French (Haiti)"
		  Case 140c Locale = "French (Luxembourg)"
		  Case 340c Locale = "French (Mali)"
		  Case 180c Locale = "French (Monaco)"
		  Case 380c Locale = "French (Morocco)"
		  Case e40c Locale = "French (North Africa)"
		  Case 200c Locale = "French (Reunion)"
		  Case 280c Locale = "French (Senegal)"
		  Case 100c Locale = "French (Switzerland)"
		  Case 1c0c Locale = "French (West Indies)"
		  Case 0462 Locale = "Frisian (Netherlands)"
		  Case 0467 Locale = "Fulfulde (Nigeria)"
		  Case 042f Locale = "FYRO Macedonian"
		  Case 083c Locale = "Gaelic (Ireland)"
		  Case 043c Locale = "Gaelic (Scotland)"
		  Case 0456 Locale = "Galician"
		  Case 0437 Locale = "Georgian"
		  Case 0407 Locale = "German (Germany)"
		  Case 0c07 Locale = "German (Austria)"
		  Case 1407 Locale = "German (Liechtenstein)"
		  Case 1007 Locale = "German (Luxembourg)"
		  Case 0807 Locale = "German (Switzerland)"
		  Case 0408 Locale = "Greek"
		  Case 0474 Locale = "Guarani (Paraguay)"
		  Case 0447 Locale = "Gujarati"
		  Case 0468 Locale = "Hausa (Nigeria)"
		  Case 0475 Locale = "Hawaiian (United States)"
		  Case 040d Locale = "Hebrew"
		  Case 0439 Locale = "Hindi"
		  Case 0469 Locale = "Ibibio (Nigeria)"
		  Case 040f Locale = "Icelandic"
		  Case 0470 Locale = "Igbo (Nigeria)"
		  Case 0421 Locale = "Indonesian"
		  Case 045d Locale = "Inuktitut"
		  Case 0410 Locale = "Italian (Italy)"
		  Case 0810 Locale = "Italian (Switzerland)"
		  Case 0411 Locale = "Japanese"
		  Case 044b Locale = "Kannada"
		  Case 0471 Locale = "Kanuri (Nigeria)"
		  Case 0860 Locale = "Kashmiri"
		  Case 0460 Locale = "Kashmiri (Arabic)"
		  Case 043f Locale = "Kazakh"
		  Case 0453 Locale = "Khmer"
		  Case 0457 Locale = "Konkani"
		  Case 0412 Locale = "Korean"
		  Case 0440 Locale = "Kyrgyz (Cyrillic)"
		  Case 0454 Locale = "Lao"
		  Case 0476 Locale = "Latin"
		  Case 0426 Locale = "Latvian"
		  Case 0427 Locale = "Lithuanian"
		  Case 044c Locale = "Malayalam"
		  Case 043a Locale = "Maltese"
		  Case 0458 Locale = "Manipuri"
		  Case 0481 Locale = "Maori (New Zealand)"
		  Case 0450 Locale = "Mongolian (Cyrillic)"
		  Case 0850 Locale = "Mongolian (Mongolian)"
		  Case 0461 Locale = "Nepali"
		  Case 0861 Locale = "Nepali (India)"
		  Case 0414 Locale = "Norwegian (BokmÃ¥l)"
		  Case 0814 Locale = "Norwegian (Nynorsk)"
		  Case 0448 Locale = "Oriya"
		  Case 0472 Locale = "Oromo"
		  Case 0479 Locale = "Papiamentu"
		  Case 0463 Locale = "Pashto"
		  Case 0415 Locale = "Polish"
		  Case 0416 Locale = "Portuguese (Brazil)"
		  Case 0816 Locale = "Portuguese (Portugal)"
		  Case 0446 Locale = "Punjabi"
		  Case 0846 Locale = "Punjabi (Pakistan)"
		  Case 046B Locale = "Quecha (Bolivia)"
		  Case 086B Locale = "Quecha (Ecuador)"
		  Case 0C6B Locale = "Quecha (Peru)"
		  Case 0417 Locale = "Rhaeto-Romanic"
		  Case 0418 Locale = "Romanian"
		  Case 0818 Locale = "Romanian (Moldava)"
		  Case 0419 Locale = "Russian"
		  Case 0819 Locale = "Russian (Moldava)"
		  Case 043b Locale = "Sami (Lappish)"
		  Case 044f Locale = "Sanskrit"
		  Case 046c Locale = "Sepedi"
		  Case 0c1a Locale = "Serbian (Cyrillic)"
		  Case 081a Locale = "Serbian (Latin)"
		  Case 0459 Locale = "Sindhi (India)"
		  Case 0859 Locale = "Sindhi (Pakistan)"
		  Case 045b Locale = "Sinhalese (Sri Lanka)"
		  Case 041b Locale = "Slovak"
		  Case 0424 Locale = "Slovenian"
		  Case 0477 Locale = "Somali"
		  Case 0c0a Locale = "Spanish (Spain - Modern Sort)"
		  Case 040a Locale = "Spanish (Spain - Traditional Sort)"
		  Case 2c0a Locale = "Spanish (Argentina)"
		  Case 400a Locale = "Spanish (Bolivia)"
		  Case 340a Locale = "Spanish (Chile)"
		  Case 240a Locale = "Spanish (Colombia)"
		  Case 140a Locale = "Spanish (Costa Rica)"
		  Case 1c0a Locale = "Spanish (Dominican Republic)"
		  Case 300a Locale = "Spanish (Ecuador)"
		  Case 440a Locale = "Spanish (El Salvador)"
		  Case 100a Locale = "Spanish (Guatemala)"
		  Case 480a Locale = "Spanish (Honduras)"
		  Case 580a Locale = "Spanish (Latin America)"
		  Case 080a Locale = "Spanish (Mexico)"
		  Case 4c0a Locale = "Spanish (Nicaragua)"
		  Case 180a Locale = "Spanish (Panama)"
		  Case 3c0a Locale = "Spanish (Paraguay)"
		  Case 280a Locale = "Spanish (Peru)"
		  Case 500a Locale = "Spanish (Puerto Rico)"
		  Case 540a Locale = "Spanish (United States)"
		  Case 380a Locale = "Spanish (Uruguay)"
		  Case 200a Locale = "Spanish (Venezuela)"
		  Case 0430 Locale = "Sutu"
		  Case 0441 Locale = "Swahili"
		  Case 041d Locale = "Swedish"
		  Case 081d Locale = "Swedish (Finland)"
		  Case 045a Locale = "Syriac"
		  Case 0428 Locale = "Tajik"
		  Case 045f Locale = "Tamazight (Arabic)"
		  Case 085f Locale = "Tamazight (Latin)"
		  Case 0449 Locale = "Tamil"
		  Case 0444 Locale = "Tatar"
		  Case 044a Locale = "Telugu"
		  Case 0851 Locale = "Tibetan (Bhutan)"
		  Case 0451 Locale = "Tibetan (PRC)"
		  Case 0873 Locale = "Tigrigna (Eritrea)"
		  Case 0473 Locale = "Tigrigna (Ethiopia)"
		  Case 0431 Locale = "Tsonga"
		  Case 0432 Locale = "Tswana"
		  Case 041f Locale = "Turkish"
		  Case 0442 Locale = "Turkmen"
		  Case 0480 Locale = "Uighur (China)"
		  Case 0422 Locale = "Ukrainian"
		  Case 0420 Locale = "Urdu"
		  Case 0820 Locale = "Urdu (India)"
		  Case 0843 Locale = "Uzbek (Cyrillic)"
		  Case 0443 Locale = "Uzbek (Latin)"
		  Case 0433 Locale = "Venda"
		  Case 042a Locale = "Vietnamese"
		  Case 0452 Locale = "Welsh"
		  Case 0434 Locale = "Xhosa"
		  Case 0478 Locale = "Yi"
		  Case 043d Locale = "Yiddish"
		  Case 046a Locale = "Yoruba"
		  Case 0435 Locale = "Zulu"
		  Case 04ff Locale = "HID (Human Interface Device)"
		  Case Else
				Locale = "Could Not Determine OS Locale"
		  End Select
		  Caption = objOSItem.Caption
		  CSDVersion = objOSItem.CSDVersion
		  CSName = objOSItem.CSName
		  Version = objOSItem.Version
		  BuildType = objOSItem.BuildType
		  BuildNumber = objOSItem.BuildNumber
		  SerialNumber = objOSItem.SerialNumber
		  objSWbemDateTime.Value = objOSItem.InstallDate
		  InstallDate = objSWbemDateTime.GetVarDate(True)
		  objSWbemDateTime.Value = objOSItem.LastBootUpTime
		  LastBootUpTime = objSWbemDateTime.GetVarDate(True)
		  Status = objOSItem.Status
	 Next
	 For Each objCompSysItem in colCompSysItems
		  CurrentTimeZone = objCompSysItem.CurrentTimeZone
		  DaylightInEffect = objCompSysItem.DaylightInEffect
		  TotalMemory = FormatNumber(objCompSysItem.TotalPhysicalMemory/1024^3, 2)
	 Next
	 For Each objTZItem in colTZItems
		  TZName = objTZItem.StandardName
	 Next
	 For Each objCompSysProdItem in colCompSysProdItems
		  CompSysName = objCompSysProdItem.Name
		  IdentifyingNumber = objCompSysProdItem.IdentifyingNumber
		  UUID = objCompSysProdItem.UUID
	 Next
	 For Each objOS in colOperatingSystems
		  dtmBootup = objOS.LastBootUpTime
	 Next
	 WMIDateStringToDate = CDate(Mid(dtmBootup, 5, 2) & "/" & _
	 Mid(dtmBootup, 7, 2) & "/" & Left(dtmBootup, 4) )
	 WMIDateStringToTime = CDate(Mid(dtmBootup, 9, 2) & ":" & _
	 Mid(dtmBootup, 11, 2) & ":" & Mid(dtmBootup,13, 2))
	 For Each objBIOSItem in colBIOSItems
		  SMBIOSVersion = objBIOSItem.SMBIOSBIOSVersion
	 Next
	 reportfile.writeline "" & "," & "Computer Name: " &  ","  & CSName
	 GetKeys()
	 reportfile.writeline "" & "," & "Last Boot Date: " &  ","  &  WMIDateStringToDate
	 reportfile.writeline "" & "," & "Last Boot Time: " &  ","  &  WMIDateStringToTime
	 reportfile.writeline "" & "," & "Operating System"
	 reportfile.writeline "OS" & "," & "Operating System: " &  ","  & Caption & Arch
	 reportfile.writeline "OS" & "," & "Version: " &  ","  & Version & "" &  ","  & Sku & "" &  ","  & CSDVersion
	 reportfile.writeline "OS" & "," & "Build Type: " &  ","  & BuildType
	 reportfile.writeline "" & "," & "Locale: " &  ","  & Locale
	 reportfile.writeline "OS" & "," & "Serial Number: " &  ","  & SerialNumber
	 reportfile.writeline "" & "," & "Current Time Zone: " &  ","  & TZName
	 reportfile.writeline "" & "," & "Offset from UTC: " &  ","  & CurrentTimeZone/60 & " hours"
	 reportfile.writeline "" & "," & "DST In Effect: " &  ","  & DaylightInEffect
	 reportfile.writeline "OS" & "," & "Install Date: " &  ","  & InstallDate
	 reportfile.writeline "OS" & "," & "Last Boot Time: " &  ","  & LastBootUpTime
	 reportfile.writeline "" & "," & "Local Date/Time: " &  ","  & Now()
	 reportfile.writeline "" & "," & "System Status: " &  ","  & Status
	 reportfile.writeline "" & "," & "Hardware Information"
	 For Each objProcItem in colProcItems
		  Select Case objProcItem.Architecture
		  Case 0 CPUArch = "x86"
		  Case 1 CPUArch = "MIPS"
		  Case 2 CPUArch = "Alpha"
		  Case 3 CPUArch = "PowerPC"
		  Case 6 CPUArch = "Itanium"
		  Case 9 CPUArch = "x64"
		  Case Else
				CPUArch = "Could Not Determine CPU Architecture"
		  End Select
		  reportfile.writeline "Processor" & "," & "CPU: " &  ","  & objProcItem.Name & " (" & CPUArch & ")"
	 Next
	 reportfile.writeline "" & "," & "RAM"
	 reportfile.writeline "Memory" & "," & "Physical Memory: " &  ","  & TotalMemory & " GB"
	 reportfile.writeline "" & "," & "Cache"
	 For Each objCacheItem in colCacheMemory
		  reportfile.writeline "" & "," & "BlockSize: " &  ","  &  objCacheItem.BlockSize
		  reportfile.writeline "" & "," & "CacheType: " &  ","  &  objCacheItem.CacheType
		  reportfile.writeline "" & "," & "Description: " &  ","  &  objCacheItem.Description
		  reportfile.writeline "" & "," & "DeviceID: " &  ","  &  objCacheItem.DeviceID
		  reportfile.writeline "" & "," & "InstalledSize: " &  ","  &  objCacheItem.InstalledSize
		  reportfile.writeline "" & "," & "Level: " &  ","  &  objCacheItem.Level
		  reportfile.writeline "" & "," & "MaxCacheSize: " &  ","  &  objCacheItem.MaxCacheSize
		  reportfile.writeline "" & "," & "NumberOfBlocks: " &  ","  &  objCacheItem.NumberOfBlocks
		  reportfile.writeline "" & "," & "Purpose: " &  ","  &  objCacheItem.Purpose
	 Next
	 reportfile.writeline "" & "," & "Graphics Card"
	 For Each objVideoItem in colVideoItems
		  reportfile.writeline "VideoCard" & "," & "Video Card: " &  ","  & objVideoItem.Name
		  If Not objVideoItem.AdapterDACType = "" Then
				reportfile.writeline "VideoCard" & "," & "Adapter DAC: " &  ","  & objVideoItem.AdapterDACType
		  End if
		  reportfile.writeline "VideoCard" & "," & "PNP Device ID: " &  ","  & objVideoItem.PNPDeviceID
		  If Not objVideoItem.AdapterRAM = "" Then
				reportfile.writeline "VideoCard" & "," & "Video RAM: " &  ","  & objVideoItem.AdapterRAM/1024^2 & " MB"
		  End If
		  reportfile.writeline "VideoCard" & "," & "Driver Version: " &  ","  & objVideoItem.DriverVersion
		  objSWbemDateTime.Value = objVideoItem.DriverDate
		  DriverDate = objSWbemDateTime.GetVarDate(False)
		  reportfile.writeline "VideoCard" & "," & "Driver Date: " &  ","  & DriverDate
	 Next
	 reportfile.writeline "" & "," & "Sound Card"
	 For Each objSoundItem in colSoundItems
		  reportfile.writeline "SoundCard" & "," & "Sound Card: " &  ","  & objSoundItem.Name
		  reportfile.writeline "SoundCard" & "," & "Manufacturer: " &  ","  & objSoundItem.Manufacturer
		  reportfile.writeline "SoundCard" & "," & "PNP Device ID: " &  ","  & objSoundItem.PNPDeviceID
	 Next
	 reportfile.writeline "" & "," & "Storage"
	 For Each objDiskItem in colDiskItems
		  If objDiskItem.DriveType = 3 Then
				reportfile.writeline "Storage" & "," & "Volume: " &  ","  & objDiskItem.Caption
				reportfile.writeline "Storage" & "," & "Compressed: " &  ","  & objDiskItem.Compressed
				reportfile.writeline "Storage" & "," & "File System: " &  ","  & objDiskItem.FileSystem
				reportfile.writeline "Storage" & "," & "Volume Size: " &  ","  & FormatNumber(objDiskItem.Size/1024^3, 2) & " GB"
				reportfile.writeline "Storage" & "," & "Free Space: " &  ","  & FormatNumber(objDiskItem.FreeSpace/1024^3, 2) & " GB"
		  End If
	 Next
	 reportfile.writeline "" & "," & "Networks"
	 For Each objNetAdapConfigItem in colNetAdapConfigItems
		  If isNull(objNetAdapConfigItem.IPAddress) Then
				'// Skip adapter, not currently used
		  Else
				reportfile.writeline "Net" & "," & "Network Adapter: " &  ","  & objNetAdapConfigItem.Description
				reportfile.writeline "Net" & "," & "MAC Address: " &  ","  & objNetAdapConfigItem.MACAddress
				reportfile.writeline "Net" & "," & "DHCP Enabled: " &  ","  & objNetAdapConfigItem.DHCPEnabled
				reportfile.writeline "Net" & "," & "IP Address: " &  ","  & Join(objNetAdapConfigItem.IPAddress, ",")
				reportfile.writeline "Net" & "," & "Subnet Mask: " &  ","  & Join(objNetAdapConfigItem.IPSubnet, ",")
				reportfile.writeline "Net" & "," & "Default Gateway: " &  ","  & Join(objNetAdapConfigItem.DefaultIPGateway, ",")
				If objNetAdapConfigItem.DHCPEnabled = True Then
					 objSWbemDateTime.Value = objNetAdapConfigItem.DHCPLeaseObtained
					 DHCPLeaseObtained = objSWbemDateTime.GetVarDate(True)
					 reportfile.writeline "" & "," & "Lease Obtained: " &  ","  & DHCPLeaseObtained
					 objSWbemDateTime.Value = objNetAdapConfigItem.DHCPLeaseExpires
					 DHCPLeaseExpires = objSWbemDateTime.GetVarDate(True)
					 reportfile.writeline "" & "," & "Lease Exipres: " &  ","  & DHCPLeaseExpires
					 reportfile.writeline "" & "," & "DHCP Servers: " &  ","  & objNetAdapConfigItem.DHCPServer
				End If
				reportfile.writeline "Net" & "," & "DNS Server: " &  ","  & Join(objNetAdapConfigItem.DNSServerSearchOrder, ",")
				If Not objNetAdapConfigItem.WINSPrimaryServer = "" Then
					 reportfile.writeline "" & "," & "WINS Primary Server: " &  ","  & objNetAdapConfigItem.WINSPrimaryServer
					 If Not objNetAdapConfigItem.WINSSecondaryServer = "" Then
						  reportfile.writeline "" & "," & "WINS Secondary Server: " &  ","  & objNetAdapConfigItem.WINSPrimaryServer
					 End If
					 reportfile.writeline "" & "," & "Enable LMHosts Lookup: " &  ","  & objNetAdapConfigItem.WINSEnableLMHostsLookup
				End If
		  End If
	 Next
	 reportfile.writeline "" & "," & "System Information"
	 reportfile.writeline "System" & "," & "Computer: " &  ","  & CompSysName
	 reportfile.writeline "System" & "," & "Serial Number: " &  ","  & IdentifyingNumber
	 reportfile.writeline "System" & "," & "BIOS Version: " &  ","  & SMBIOSVersion
	 reportfile.writeline "System" & "," & "UUID: " &  ","  & UUID
	 reportfile.writeline "" & "," & "Port Information"
	 For Each objPort in colPortInfo
		  reportfile.writeline "" & "," & "ExternalReferenceDesignator: " &  ","  &  objPort.ExternalReferenceDesignator
		  reportfile.writeline "" & "," & "InternalReferenceDesignator: " &  ","  &  objPort.InternalReferenceDesignator
		  reportfile.writeline "" & "," & "PortType: " &  ","  &  objPort.PortType
		  reportfile.writeline "" & "," & "Tag: " &  ","  &  objPort.Tag
	 Next
	 reportfile.writeline "" & "," & "User Information"
	 For Each objUser in colUserInfo
		  reportfile.writeline "" & "," & "Caption: " &  ","  & objUser.Caption
		  reportfile.writeline "" & "," & "Domain: " &  ","  & objUser.Domain
		  reportfile.writeline "" & "," & "FullName: " &  ","  & objUser.FullName
	 Next
End Function	

Public Function GetKeys()
	 For x = LBound(arrSubKeys, 1) To UBound(arrSubKeys, 1)
		  objReg.GetBinaryValue HKEY_LOCAL_MACHINE, arrSubKeys(x,1), SEARCH_KEY, arrDPIDBytes
		  If Not IsNull(arrDPIDBytes) Then
				Call decodeKey(arrDPIDBytes, arrSubKeys(x,0))
		  Else
				objReg.EnumKey HKEY_LOCAL_MACHINE, arrSubKeys(x,1), arrGUIDKeys
				If Not IsNull(arrGUIDKeys) Then
					 For Each GUIDKey In arrGUIDKeys
						  objReg.GetBinaryValue HKEY_LOCAL_MACHINE, arrSubKeys(x,1) & "\" & GUIDKey, SEARCH_KEY, arrDPIDBytes
						  If Not IsNull(arrDPIDBytes) Then
								Call decodeKey(arrDPIDBytes, arrSubKeys(x,0))
						  End If
					 Next
				End If
		  End If
	 Next
End Function

Public Function decodeKey(iValues, strProduct)
	 Dim arrDPID
	 arrDPID = Array()
	 For i = 52 to 66
		  ReDim Preserve arrDPID( UBound(arrDPID) + 1 )
		  arrDPID( UBound(arrDPID) ) = iValues(i)
	 Next
	 Dim arrChars
	 arrChars = Array("B","C","D","F","G","H","J","K","M","P","Q","R","T","V","W","X","Y","2","3","4","6","7","8","9")
	 For i = 24 To 0 Step -1
		  k = 0
		  For j = 14 To 0 Step -1
				k = k * 256 Xor arrDPID(j)
				arrDPID(j) = Int(k / 24)
				k = k Mod 24
		  Next
		  strProductKey = arrChars(k) & strProductKey
		  If i Mod 5 = 0 And i <> 0 Then
				strProductKey = "-" & strProductKey
		  End If
	 Next
	 ReDim Preserve foundKeys( UBound(foundKeys) + 1 )
	 foundKeys( UBound(foundKeys) ) = strProductKey
	 strKey = UBound(foundKeys)
	 reportfile.writeline "" & "," & "Windows Key - " &  ","  & strProduct & "" & foundKeys(strKey)
End Function